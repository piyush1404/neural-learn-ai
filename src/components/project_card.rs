use crate::{components::project_form::ProjectForm, store::project_schema::NeuronConfig};
use dioxus::prelude::*;

use crate::date_format::format_date_mmddyyyy;

use crate::store::project::get_project_by_id;

#[component]
pub fn ProjectCard(
    id: String,
    name: String,
    platform: String,
    interface: String,
    description: String,
    created_at: String,
    updated_at: String,
    neurons: Option<NeuronConfig>,
) -> Element {

    let project = get_project_by_id(&id).unwrap();
    let project = project.clone();
    println!("Project: {:#?}", project);

    let (min_if, max_if, search_area_str, total_neurons, committed_neurons) =
        if let Some(n) = &neurons {
            (
                Some(n.min_if),
                Some(n.max_if),
                Some(
                    n.search_area
                        .iter()
                        .map(|v| v.to_string())
                        .collect::<Vec<_>>()
                        .join(", "),
                ),
                Some(n.total_neurons),
                Some(n.committed_neurons),
            )
        } else {
            (None, None, None, None, None)
        };

    // Pre-formatted display strings
    let min_if_str = min_if.map(|v| format!("Min if: {:02}", v));
    let max_if_str = max_if.map(|v| format!("Max if: {}", v));
    let search_area_display = search_area_str
        .as_ref()
        .map(|s| format!("Search area: [{}]", s));
    let nn_capacity_str = total_neurons.map(|v| format!("NN Capacity: {}", v));
    let committed_str = committed_neurons.map(|v| format!("Neurons:{}", v));

    let min_parts = min_if_str.as_ref().and_then(|s| {
        let parts: Vec<&str> = s.split(": ").collect();
        if parts.len() == 2 {
            Some((parts[0], parts[1]))
        } else {
            None
        }
    });

    let max_parts = max_if_str.as_ref().and_then(|s| {
        let parts: Vec<&str> = s.split(": ").collect();
        if parts.len() == 2 {
            Some((parts[0], parts[1]))
        } else {
            None
        }
    });

    let search_parts = search_area_display.as_ref().and_then(|s| {
        let parts: Vec<&str> = s.split(": ").collect();
        if parts.len() == 2 {
            Some((parts[0], parts[1]))
        } else {
            None
        }
    });

    let nn_parts = nn_capacity_str.as_ref().and_then(|s| {
        let parts: Vec<&str> = s.split(": ").collect();
        if parts.len() == 2 {
            Some((parts[0], parts[1]))
        } else {
            None
        }
    });

    let committed_parts = committed_str.as_ref().and_then(|s| {
        let parts: Vec<&str> = s.split(":").collect();
        if parts.len() == 2 {
            Some((parts[0], parts[1]))
        } else {
            None
        }
    });

    created_at = format_date_mmddyyyy(created_at.as_str());
    updated_at = format_date_mmddyyyy(updated_at.as_str());

    let mut hovered = use_signal(|| false);

    let mut show_edit_modal = use_signal(|| false);

    rsx! {
        div {
            // onmouseenter: move |_| hovered.set(true),
            onmouseleave: move |_| hovered.set(false),
            class: "transition-all duration-300",
            if hovered() {
                // HOVERED VIEW (Styled like the attached image)
                div {
                    class: "relative group min-h-full bg-[#D9D9D9] border border-[#BEBEBE] hover:border-[#A0A0A0] rounded-xl p-[15px] shadow-sm hover:shadow-md hover:scale-[1.01] cursor-pointer transition-all duration-200 flex flex-col gap-1",
                    // Header with icon and name
                    div {
                        class: "flex items-center gap-3",
                        div {
                            class: "w-8 h-8 border-[0.5px] border-[#BEBEBE] rounded-full bg-[#FFFFFF] flex items-center justify-center",
                            span {
                                class:"h-[15px] w-[15px] flex items-center justify-center",
                                // "üñºÔ∏è"
                                svg {
                                    width: "18",
                                    height: "14",
                                    view_box: "0 0 18 14",
                                    fill: "none",
                                    xmlns: "http://www.w3.org/2000/svg",
                                    path {
                                        d: "M17.25 2.17288C17.038 2.0697 16.801 2.02909 16.5668 2.0558C16.3326 2.08252 16.1108 2.17545 15.9275 2.32371L13.7917 4.03204V3.66621C13.8406 3.24399 13.7934 2.81618 13.6537 2.41476C13.514 2.01335 13.2852 1.64873 12.9847 1.34818C12.6841 1.04763 12.3195 0.818925 11.9181 0.679182C11.5167 0.539439 11.0889 0.492272 10.6667 0.541209H3.16667C2.74445 0.492272 2.31663 0.539439 1.91522 0.679182C1.5138 0.818925 1.14918 1.04763 0.848634 1.34818C0.548083 1.64873 0.319382 2.01335 0.17964 2.41476C0.039897 2.81618 -0.0072702 3.24399 0.0416665 3.66621V10.3329C-0.0072702 10.7551 0.039897 11.1829 0.17964 11.5843C0.319382 11.9857 0.548083 12.3504 0.848634 12.6509C1.14918 12.9515 1.5138 13.1802 1.91522 13.3199C2.31663 13.4596 2.74445 13.5068 3.16667 13.4579H10.6667C11.0889 13.5068 11.5167 13.4596 11.9181 13.3199C12.3195 13.1802 12.6841 12.9515 12.9847 12.6509C13.2852 12.3504 13.514 11.9857 13.6537 11.5843C13.7934 11.1829 13.8406 10.7551 13.7917 10.3329V9.96704L15.9275 11.6754C16.1479 11.8534 16.4226 11.9504 16.7058 11.9504C16.8942 11.9501 17.0801 11.9077 17.25 11.8262C17.4629 11.7248 17.6425 11.565 17.768 11.3654C17.8934 11.1657 17.9594 10.9345 17.9583 10.6987V3.30038C17.9594 3.0646 17.8934 2.83338 17.768 2.63373C17.6425 2.43408 17.4629 2.27424 17.25 2.17288ZM12.5417 10.3329C12.5417 11.647 11.9808 12.2079 10.6667 12.2079H3.16667C1.8525 12.2079 1.29167 11.647 1.29167 10.3329V3.66621C1.29167 2.35204 1.8525 1.79121 3.16667 1.79121H10.6667C11.9808 1.79121 12.5417 2.35204 12.5417 3.66621V10.3329ZM16.7083 10.6995L13.7917 8.36621V5.63288L16.7083 3.29954V10.6995Z",
                                        fill: "#0387D9",
                                    }
                                }
                            }
                        }
                        h2 {
                            class: "font-normal text-sm text-[#151515]",
                            "{name}"
                        }
                    }

                    // Metadata
                    p {
                        class: "text-[9px] text-[#787878]",
                        "Created : {created_at} ¬†¬†¬†Last edited : {updated_at}"
                    }

                    // hr { class: "border-t border-gray-200 my-1" }

                    // Description Card
                    div {
                        class: "min-h-[160px] max-h-[160px] bg-[#FFFFFF] rounded-t-[14px] p-3 -mb-[15px] shadow-[0_4px_6px_0_#00000040]",

                        div {
                            class: "text-xs text-[#404040] mb-1",
                            "Description"
                        }
                        div {
                            class: "text-xs text-[#313131] font-normal leading-tight overflow-hidden text-ellipsis line-clamp-[6] flex-1",
                            "{description}"
                        }
                    }
                }

            } else {
                // ORIGINAL VIEW (what you already had)
                div {
                    class: "h-full relative group border border-[#BEBEBE] hover:border-[#A0A0A0] rounded-xl p-[15px] shadow-sm hover:shadow-md hover:scale-[1.01] cursor-pointer transition-all duration-200 flex flex-col gap-1",
                    div {  
                            onmouseenter: move |_| hovered.set(true),
                            onmouseleave: move |_| hovered.set(false),
                        // Header with icon and name
                        div {
                            class: "flex items-center gap-3",
                            div {
                                class: "w-8 h-8 border-[0.5px] border-[#BEBEBE] rounded-full bg-[#FFFFFF] flex items-center justify-center",
                                span {
                                    class:"h-[15px] w-[15px] flex items-center justify-center",
                                    // "üñºÔ∏è"
                                    svg {
                                        width: "18",
                                        height: "14",
                                        view_box: "0 0 18 14",
                                        fill: "none",
                                        xmlns: "http://www.w3.org/2000/svg",
                                        path {
                                            d: "M17.25 2.17288C17.038 2.0697 16.801 2.02909 16.5668 2.0558C16.3326 2.08252 16.1108 2.17545 15.9275 2.32371L13.7917 4.03204V3.66621C13.8406 3.24399 13.7934 2.81618 13.6537 2.41476C13.514 2.01335 13.2852 1.64873 12.9847 1.34818C12.6841 1.04763 12.3195 0.818925 11.9181 0.679182C11.5167 0.539439 11.0889 0.492272 10.6667 0.541209H3.16667C2.74445 0.492272 2.31663 0.539439 1.91522 0.679182C1.5138 0.818925 1.14918 1.04763 0.848634 1.34818C0.548083 1.64873 0.319382 2.01335 0.17964 2.41476C0.039897 2.81618 -0.0072702 3.24399 0.0416665 3.66621V10.3329C-0.0072702 10.7551 0.039897 11.1829 0.17964 11.5843C0.319382 11.9857 0.548083 12.3504 0.848634 12.6509C1.14918 12.9515 1.5138 13.1802 1.91522 13.3199C2.31663 13.4596 2.74445 13.5068 3.16667 13.4579H10.6667C11.0889 13.5068 11.5167 13.4596 11.9181 13.3199C12.3195 13.1802 12.6841 12.9515 12.9847 12.6509C13.2852 12.3504 13.514 11.9857 13.6537 11.5843C13.7934 11.1829 13.8406 10.7551 13.7917 10.3329V9.96704L15.9275 11.6754C16.1479 11.8534 16.4226 11.9504 16.7058 11.9504C16.8942 11.9501 17.0801 11.9077 17.25 11.8262C17.4629 11.7248 17.6425 11.565 17.768 11.3654C17.8934 11.1657 17.9594 10.9345 17.9583 10.6987V3.30038C17.9594 3.0646 17.8934 2.83338 17.768 2.63373C17.6425 2.43408 17.4629 2.27424 17.25 2.17288ZM12.5417 10.3329C12.5417 11.647 11.9808 12.2079 10.6667 12.2079H3.16667C1.8525 12.2079 1.29167 11.647 1.29167 10.3329V3.66621C1.29167 2.35204 1.8525 1.79121 3.16667 1.79121H10.6667C11.9808 1.79121 12.5417 2.35204 12.5417 3.66621V10.3329ZM16.7083 10.6995L13.7917 8.36621V5.63288L16.7083 3.29954V10.6995Z",
                                            fill: "#0387D9",
                                        }
                                    }
                                }
                            }
                            h2 {
                                class: "font-normal text-sm text-[#151515]",
                                "{name}"
                            }
                        }

                        // Metadata
                        p {
                            class: "text-[9px] text-[#787878]",
                            "Created : {created_at} ¬†¬†¬†Last edited : {updated_at}"
                        }

                        hr { class: "border-t border-gray-200" }

                        // Platform info
                        div {
                            class: "flex items-center gap-2",
                            svg {
                                width: "14",
                                height: "10",
                                view_box: "0 0 14 10",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                path {
                                    d: "M13.4593 3.44864C13.4005 3.32866 13.2786 3.2525 13.145 3.2525H11.8937C11.7004 3.2525 11.5437 3.40916 11.5437 3.6025V4.34394H11.0457V3.60082C11.0457 3.40818 10.89 3.25166 10.6974 3.25082L9.92614 3.24718L9.44524 2.15672C9.38938 2.02988 9.26366 1.94798 9.12506 1.94798H7.24556V1.05156H8.2334C8.42674 1.05156 8.5834 0.894902 8.5834 0.701562C8.5834 0.508222 8.42674 0.351562 8.2334 0.351562H4.0803C3.88696 0.351562 3.7303 0.508222 3.7303 0.701562C3.7303 0.894902 3.88696 1.05156 4.0803 1.05156H5.28766V1.94798H3.64112C3.51484 1.94798 3.39836 2.01602 3.33634 2.12592L2.98424 2.7499H2.74442C2.11008 2.7499 1.59404 3.26594 1.59404 3.90028V4.66342H0.78596C0.75614 4.66342 0.72772 4.66832 0.7 4.67532V2.79708C0.7 2.60374 0.54334 2.44708 0.35 2.44708C0.15666 2.44708 0 2.60374 0 2.79708V7.10978C0 7.30312 0.15666 7.45978 0.35 7.45978C0.54334 7.45978 0.7 7.30312 0.7 7.10978V5.35138C0.72758 5.35838 0.75614 5.36328 0.78596 5.36328H1.5939V7.05994C1.5939 7.70254 2.11666 8.22516 2.75926 8.22516H3.8822L5.20394 9.54676C5.2696 9.61242 5.3585 9.64924 5.45146 9.64924H10.6959C10.8892 9.64924 11.0459 9.49258 11.0459 9.29924V8.2911L11.5438 8.29012V8.95106C11.5438 9.14412 11.7001 9.30078 11.8933 9.30106L13.1712 9.3033H13.1718C13.3048 9.3033 13.4263 9.22784 13.4854 9.1087C13.5064 9.06614 14.0001 8.0489 14.0001 6.23072C14 4.572 13.4814 3.49358 13.4593 3.44864ZM5.98766 1.05156H6.54556V1.94798H5.98766V1.05156ZM12.9364 8.60288L12.2437 8.60162V7.93956C12.2437 7.8466 12.2067 7.75742 12.1411 7.69176C12.0754 7.62624 11.9865 7.58956 11.8937 7.58956C11.8936 7.58956 11.8933 7.58956 11.8931 7.58956L10.6952 7.59166C10.502 7.59194 10.3457 7.7486 10.3457 7.94166V8.94924H5.59636L4.27462 7.62764C4.20896 7.56198 4.12006 7.52516 4.0271 7.52516H2.75926C2.50264 7.52516 2.2939 7.31642 2.2939 7.05994V3.90028C2.2939 3.65192 2.49592 3.4499 2.74428 3.4499H3.1885C3.31478 3.4499 3.43126 3.38186 3.49328 3.27196L3.84538 2.64798H8.897L9.37734 3.73718C9.43292 3.8636 9.5578 3.94536 9.69584 3.94606L10.3459 3.94914V4.69394C10.3459 4.88728 10.5025 5.04394 10.6959 5.04394H11.8938C12.0872 5.04394 12.2438 4.88728 12.2438 4.69394V3.9525H12.9122C13.0465 4.30754 13.3 5.12416 13.3 6.23086C13.3 7.43584 13.0634 8.25176 12.9364 8.60288Z",
                                    fill: "#9F9F9F",
                                }
                            }
                            span { class: "text-[10px] text-[#787878] font-medium", "Platform :" }
                            span { class: "text-[10px] text-[#158826] font-medium", "{platform}" }
                            svg {
                                width: "14",
                                height: "14",
                                view_box: "0 0 14 14",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                path {
                                    d: "M6.03666 10.3015L4.74969 11.5885C4.10519 12.233 3.05652 12.2332 2.4117 11.5885C1.76731 10.944 1.76752 9.89531 2.41202 9.25082L4.9961 6.66673C5.59328 6.06955 6.53771 6.02544 7.18573 6.53503C7.237 6.5753 7.28645 6.6192 7.33377 6.66652C7.62077 6.95341 8.06575 6.95811 8.34677 6.67699L9.15661 5.86714C9.02353 5.66516 8.86972 5.47675 8.69658 5.30361C8.45251 5.05965 8.18185 4.8581 7.89346 4.69948C6.76511 4.07709 5.36962 4.10818 4.26765 4.79262C4.03875 4.93479 3.82225 5.10515 3.62358 5.30393L1.04911 7.8784C-0.349585 9.27709 -0.349585 11.5528 1.04889 12.9514C2.44769 14.3501 4.72331 14.3501 6.12211 12.9514L8.43809 10.6354C7.6291 10.7424 6.7964 10.6314 6.03666 10.3015Z",
                                    fill: "#0387D9"
                                }
                                path {
                                    d: "M12.951 1.04891C11.5524 -0.349673 9.27678 -0.349673 7.87798 1.04913L5.56221 3.3649C6.3712 3.25777 7.2039 3.36885 7.96364 3.69879L9.25072 2.41172C9.89522 1.76722 10.9437 1.76722 11.5882 2.41172C12.2329 3.05643 12.2329 4.10489 11.5884 4.74939L9.00399 7.33379C8.41343 7.92435 7.47616 7.96515 6.82888 7.45801C6.7759 7.41689 6.72528 7.37192 6.67668 7.32332C6.39448 7.04113 5.93551 7.04134 5.65332 7.32354L4.84348 8.13338C4.97667 8.33493 5.13069 8.52356 5.30351 8.69638C5.54928 8.94215 5.82229 9.14467 6.11271 9.30414C7.24726 9.92695 8.6498 9.89053 9.75252 9.1953C9.97405 9.05569 10.1837 8.88939 10.3764 8.6966L12.951 6.12212C14.3497 4.72333 14.3497 2.44771 12.951 1.04891Z",
                                    fill: "#1766A0"
                                }
                            }
                        }


                        // Metrics
                        div {
                            class: "flex flex-col gap-1 text-[13px] mt-1",

                            // First row: min_if, max_if, search_area
                            div {
                                class: "flex flex-wrap gap-1",
                                if let Some((key, val)) = min_parts {
                                    span {
                                        class: "bg-[#F0F0F0] px-2 py-1 font-normal rounded text-[10px] flex gap-1",
                                        span { class: "text-[#555555]", "{key}:" }
                                        span { class: "text-[#151515] ", "{val}" }
                                    }
                                }
                                if let Some((key, val)) = max_parts {
                                    span {
                                        class: "bg-[#F0F0F0] px-2 py-1 font-normal rounded text-[10px] flex gap-1",
                                        span { class: "text-[#555555]", "{key}:" }
                                        span { class: "text-black ", "{val}" }
                                    }
                                }
                                if let Some((key, val)) = search_parts {
                                    span {
                                        class: "bg-[#F0F0F0] px-2 py-1 font-normal rounded text-[10px] flex gap-1",
                                        span { class: "text-[#555555]", "{key}:" }
                                        span { class: "text-black ", "{val}" }
                                    }
                                }
                            }

                            // Second row: nn_capacity, committed_neurons
                            div {
                                class: "flex flex-wrap gap-1",
                                if let Some((key, val)) = nn_parts {
                                    span {
                                        class: "bg-[#F0F0F0] px-2 py-1 font-normal rounded text-[10px] flex gap-1",
                                        span { class: "text-[#555555]", "{key}:" }
                                        span { class: "text-black ", "{val}" }
                                    }
                                }
                                if let Some((key, val)) = committed_parts {
                                    span {
                                        class: "bg-[#F0F0F0] px-2 py-1 font-normal rounded text-[10px] flex gap-1",
                                        span { class: "text-[#555555]", "{key}:" }
                                        span { class: "text-black", "{val}" }
                                    }
                                }
                            }
                        }

                        hr { class: "border-t border-gray-200 my-1" }
                        } 
                    // Footer actions
                    div {
                        class: "flex justify-between items-center",
                        div {
                            // class: "text-green-700 text-xl",
                            svg {
                                    width: "18",
                                    height: "18",
                                    view_box: "0 0 18 18",
                                    fill: "none",
                                    xmlns: "http://www.w3.org/2000/svg",
                                    path {
                                        d: "M18 8.39686C18 9.60162 17.2254 10.6281 16.1311 11.0069C16.2644 11.3336 16.3346 11.6849 16.3346 12.0406C16.3346 13.3836 15.3596 14.5062 14.0712 14.7557C13.9759 16.1965 12.7586 17.3398 11.2759 17.3398C10.3391 17.3398 9.50889 16.883 9.00002 16.1836C8.49115 16.8831 7.66088 17.3398 6.72414 17.3398C5.24144 17.3398 4.02409 16.1965 3.92884 14.7557C2.64041 14.5062 1.66535 13.3836 1.66535 12.0406C1.66535 11.6849 1.73562 11.3336 1.86887 11.0069C0.7746 10.6282 0 9.60162 0 8.39686C0 7.26269 0.696943 6.27183 1.70972 5.84889C1.55965 5.50508 1.4803 5.13186 1.4803 4.75307C1.4803 4.0126 1.78154 3.31481 2.32848 2.78831C2.76353 2.36956 3.30857 2.10256 3.89513 2.01505C4.05118 1.50872 4.34936 1.05164 4.75904 0.699104C5.28275 0.248468 5.95412 0.000297546 6.64948 0.000297546C7.6194 0.000297546 8.47816 0.476902 8.99995 1.20488C9.52173 0.476902 10.3805 0.000297546 11.3504 0.000297546C12.0457 0.000297546 12.7171 0.248468 13.2408 0.699104C13.6505 1.05164 13.9487 1.50875 14.1048 2.01505C14.6913 2.10256 15.2364 2.36956 15.6714 2.78831C16.2184 3.31481 16.5196 4.0126 16.5196 4.75307C16.5196 5.13189 16.4402 5.50508 16.2902 5.84889C17.3031 6.27187 18 7.26273 18 8.39686ZM6.64951 1.0559C5.74796 1.0559 4.97223 1.71417 4.845 2.58712C4.845 2.58719 4.845 2.58726 4.84496 2.58729C4.83275 2.67111 4.82656 2.75703 4.82656 2.84264C4.82656 3.82784 5.64433 4.62935 6.64951 4.62935C6.941 4.62935 7.17731 4.86567 7.17731 5.15715C7.17731 5.44864 6.941 5.68495 6.64951 5.68495C5.15774 5.68495 3.92761 4.55859 3.78503 3.12196C3.06962 3.3468 2.5359 4.00278 2.5359 4.75307C2.5359 5.15318 2.67243 5.52788 2.93077 5.83665C3.05505 5.98524 3.08798 6.18999 3.01652 6.37004C2.94506 6.55009 2.78066 6.67652 2.5883 6.69942C1.71451 6.80336 1.0556 7.5331 1.0556 8.39686C1.0556 9.31439 1.78777 10.0649 2.72239 10.1055C2.92229 10.1142 3.10005 10.2351 3.18155 10.4178C3.263 10.6006 3.23418 10.8137 3.10706 10.9682C2.85445 11.2752 2.72092 11.646 2.72092 12.0406C2.72092 12.8481 3.29576 13.5263 4.06603 13.7052C4.43162 12.6375 5.45848 11.8826 6.63684 11.8826C6.92833 11.8826 7.16464 12.1189 7.16464 12.4104C7.16464 12.7019 6.92833 12.9382 6.63684 12.9382C5.807 12.9382 5.10042 13.5449 4.9932 14.3493C4.98339 14.423 4.97839 14.4985 4.97839 14.5736C4.97839 15.5169 5.7615 16.2842 6.72407 16.2842C7.70979 16.2854 8.49291 15.4836 8.47243 14.521V2.85419C8.47236 2.85028 8.47183 2.84651 8.47183 2.84261C8.47183 2.83881 8.47211 2.83508 8.47211 2.83128C8.46592 1.85129 7.65082 1.0559 6.64951 1.0559ZM15.4117 6.69942C15.2193 6.67655 15.0549 6.55009 14.9834 6.37004C14.912 6.18999 14.9449 5.98524 15.0692 5.83665C15.3275 5.52788 15.4641 5.15318 15.4641 4.75307C15.4641 4.00278 14.9303 3.34676 14.215 3.12196C14.0724 4.55859 12.8422 5.68495 11.3505 5.68495C11.059 5.68495 10.8227 5.44864 10.8227 5.15715C10.8227 4.86567 11.059 4.62935 11.3505 4.62935C12.3556 4.62935 13.1734 3.82784 13.1734 2.84264C13.1734 2.7571 13.1672 2.67121 13.155 2.58729C13.155 2.58722 13.155 2.58715 13.155 2.58708C13.0277 1.71417 12.252 1.0559 11.3505 1.0559C10.3491 1.0559 9.53408 1.85133 9.52782 2.83131C9.52782 2.83511 9.5281 2.83884 9.5281 2.84264V14.5331C9.51209 15.4913 10.2956 16.2852 11.2759 16.2843C12.2385 16.2843 13.0215 15.5169 13.0215 14.5736C13.0215 14.4986 13.0165 14.4231 13.0067 14.3494C12.8995 13.5449 12.1929 12.9382 11.3631 12.9382C11.0716 12.9382 10.8353 12.7019 10.8353 12.4104C10.8353 12.1189 11.0716 11.8826 11.3631 11.8826C12.5415 11.8826 13.5683 12.6375 13.9339 13.7052C14.7041 13.5263 15.279 12.8482 15.279 12.0407C15.279 11.646 15.1455 11.2752 14.8929 10.9682C14.7658 10.8137 14.737 10.6006 14.8184 10.4179C14.8999 10.2352 15.0777 10.1142 15.2776 10.1055C16.2122 10.065 16.9444 9.31443 16.9444 8.3969C16.9444 7.5331 16.2855 6.80336 15.4117 6.69942Z",
                                        fill: "#158826",
                                    }
                                }
                            }
                            div {
                                class: "flex gap-[10px]",
                                button {
                                    class: "bg-[#F0F0F0] px-[10px] py-1 rounded-[3px] text-xs font-medium text-[#101010] ",
                                    "Delete"
                                }
                                button {
                                    onclick: move |_| show_edit_modal.set(true),
                                    class: "bg-[#101010] px-[10px] py-1 rounded-[3px] text-xs font-medium text-[#FFFFFF] ",
                                    "Edit"
                                }
                            }
                        }

                    }

                    if *show_edit_modal.read() {
                        ProjectForm {
                            show_modal: show_edit_modal,
                            project: project.clone(),
                        }
                    }

            }
        }
    }
}
